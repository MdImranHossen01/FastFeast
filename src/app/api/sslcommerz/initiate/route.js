import { NextResponse } from "next/server";
import { v4 as uuidv4 } from "uuid";
import { connectToDatabase } from "@/lib/dbConnect"; // ðŸŽ¯ Assuming you have this utility

export async function POST(request) {
Â  try {
Â  Â  // Receive the full cartItems array and customer data from the client
Â  Â  const { cartItems, customer } = await request.json();

Â  Â  // Validation check for cartItems
Â  Â  if (!Array.isArray(cartItems) || cartItems.length === 0) {
Â  Â  Â  console.error("Error: 'cartItems' is missing or empty.");
Â  Â  Â  return NextResponse.json({ success: false, message: "Invalid request data: cartItems is missing or invalid." });
Â  Â  }

Â  Â  // FIX 1: Calculate the total amount on the server securely.
Â  Â  const total_amount = cartItems.reduce(
Â  Â  Â  (acc, item) => acc + parseFloat(item.price) * parseInt(item.quantity, 10),
Â  Â  Â  0
Â  Â  );

Â  Â  // Basic total validation
Â  Â  if (isNaN(total_amount) || total_amount <= 0) {
Â  Â  Â  return NextResponse.json({ success: false, message: "Invalid calculated total amount." });
Â  Â  }

Â  Â  const tran_id = uuidv4();
Â  Â  const userEmail = customer?.email || "anonymous@example.com";
Â  Â  
Â  Â  // NOTE: SSLCommerz value_b is limited to 255 characters. 
Â  Â  // We will save the large cart data in our DB and use value_b for confirmation data only if needed.
Â  Â  const cartJson = JSON.stringify(cartItems.map(i => ({ id: i.originalId, qty: i.quantity }))); // Minimal cart data for value_b

Â  Â  if (cartJson.length > 255) {
Â  Â  Â  console.warn("Minimal cart data is still too long for SSLCommerz value_b field.");
Â  Â  Â  // For large carts, consider passing a short order reference ID instead of cartJson
Â  Â  }

Â  Â  // ðŸŽ¯ NEW LOGIC: Save the full pending order to the database
Â  Â  const { db } = await connectToDatabase();
Â  Â  
Â  Â  const pendingOrderData = {
Â  Â  Â  _id: tran_id, // Use tran_id as the unique ID for easy lookup
Â  Â  Â  userEmail: userEmail,
Â  Â  Â  total_amount: total_amount,
Â  Â  Â  items: cartItems, // Save the complete cart array
Â  Â  Â  customerInfo: customer, 
Â  Â  Â  status: "pending_sslcommerz",
Â  Â  Â  createdAt: new Date(),
Â  Â  };

Â  Â  await db.collection("pendingOrders").insertOne(pendingOrderData);
Â  Â  console.log(`âœ… Pending order saved with tran_id: ${tran_id}`);

Â  Â  const payload = {
Â  Â  Â  store_id: process.env.SSLC_STORE_ID,
Â  Â  Â  store_passwd: process.env.SSLC_STORE_PASS,
Â  Â  Â  total_amount: total_amount, // Use the secure server-calculated total
Â  Â  Â  currency: "BDT",
Â  Â  Â  tran_id,
Â  Â  Â  success_url: `${process.env.NEXT_PUBLIC_SERVER_ADDRESS}/api/sslcommerz/success`,
Â  Â  Â  fail_url: `${process.env.NEXT_PUBLIC_SERVER_ADDRESS}/checkout`,
Â  Â  Â  cancel_url: `${process.env.NEXT_PUBLIC_SERVER_ADDRESS}/checkout`,
Â  Â  Â  cus_name: customer?.fullName || "Anonymous User", // Use fullName from form
Â  Â  Â  cus_email: userEmail,
Â  Â  Â  cus_add1: customer?.address || "Dhaka",
Â  Â  Â  cus_city: customer?.city || "Dhaka",
Â  Â  Â  cus_postcode: customer?.postalCode || "1207",
Â  Â  Â  cus_country: "Bangladesh",
Â  Â  Â  cus_phone: customer?.phone || "01700000000",
Â  Â  Â  shipping_method: "NO",
Â  Â  Â  product_name: "Food Order",
Â  Â  Â  product_category: "Food",
Â  Â  Â  product_profile: "general",

Â  Â  Â  // Passing necessary data back to success route
Â  Â  Â  value_a: userEmail,
Â  Â  Â  value_b: tran_id, // ðŸŽ¯ OPTIONAL: Send tran_id or minimal cart data in value_b
Â  Â  };

Â  Â  const sslRes = await fetch("https://sandbox.sslcommerz.com/gwprocess/v4/api.php", {
Â  Â  Â  method: "POST",
Â  Â  Â  headers: { "Content-Type": "application/x-www-form-urlencoded" },
Â  Â  Â  body: new URLSearchParams(payload).toString(),
Â  Â  });

Â  Â  const data = await sslRes.json();

Â  Â  if (data.status === "SUCCESS") {
Â  Â  Â  return NextResponse.json({
Â  Â  Â  Â  success: true,
Â  Â  Â  Â  GatewayPageURL: data.GatewayPageURL,
Â  Â  Â  Â  tran_id,
Â  Â  Â  });
Â  Â  } else {
Â  Â  Â  // IMPORTANT: If SSLCommerz fails, you might want to delete the pending order here.
Â  Â  Â  await db.collection("pendingOrders").deleteOne({ _id: tran_id });
Â  Â  Â  console.error("SSLCommerz Error:", data.failedreason || data);
Â  Â  Â  return NextResponse.json({
Â  Â  Â  Â  success: false,
Â  Â  Â  Â  message: data.failedreason || "Failed to create payment session",
Â  Â  Â  Â  data,
Â  Â  Â  });
Â  Â  }
Â  } catch (err) {
Â  Â  console.error("Payment Init Error:", err);
Â  Â  return NextResponse.json({ success: false, message: err.message });
Â  }
}