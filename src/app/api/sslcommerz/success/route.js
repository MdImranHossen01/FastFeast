import { connectToDatabase } from "@/lib/dbConnect";
import crypto from "crypto";

export async function POST(req) {
Â  try {
Â  Â  const formData = await req.formData();
Â  Â  const body = Object.fromEntries(formData.entries());
Â  Â  console.log("ðŸ”¹ Success callback received:", body);

Â  Â  // We only rely on tran_id and val_id, and userEmail from value_a
Â  Â  const { tran_id, val_id, value_a: userEmail } = body;

Â  Â  if (!tran_id || !val_id) {
Â  Â  Â  return Response.redirect(`${process.env.NEXT_PUBLIC_SERVER_ADDRESS}/checkout?status=error&message=Invalid_Callback`, 302);
Â  Â  }

Â  Â  // 1. Verify the transaction with SSLCommerz
Â  Â  const storeId = process.env.SSLC_STORE_ID;
Â  Â  const storePass = process.env.SSLC_STORE_PASS;
Â  Â  const verifyUrl = `https://sandbox.sslcommerz.com/validator/api/validationserverAPI.php?val_id=${val_id}&store_id=${storeId}&store_passwd=${storePass}&format=json`;
Â  Â  
Â  Â  const verifyRes = await fetch(verifyUrl);
Â  Â  const verifyData = await verifyRes.json();

Â  Â  if (verifyData.status !== "VALID" && verifyData.status !== "VALIDATED") {
Â  Â  Â  console.warn("Payment verification failed:", verifyData);
Â  Â  Â  return Response.redirect(`${process.env.NEXT_PUBLIC_SERVER_ADDRESS}/checkout?status=failed&tran_id=${tran_id}`, 302);
Â  Â  }

Â  Â  console.log("âœ… Payment verification success.");
Â  Â  
Â  Â  // 2. Find the pending order in your database
Â  Â  const { db } = await connectToDatabase();
Â  Â  // Since we saved it in initiate.route.js, it should be here
Â  Â  const pendingOrder = await db.collection("pendingOrders").findOne({ _id: tran_id });

Â  Â  if (!pendingOrder) {
Â  Â  Â  console.error(`Error: Could not find pending order for tran_id: ${tran_id}. It might have already been processed.`);
Â  Â  Â  const finalTransaction = await db.collection("transactionHistory").findOne({ tran_id });
Â  Â  Â  if (finalTransaction) {
Â  Â  Â  Â  return Response.redirect(`${process.env.NEXT_PUBLIC_SERVER_ADDRESS}/checkout?status=success&tran_id=${tran_id}&order_id=${finalTransaction.orderId}`, 302);
Â  Â  Â  }
Â  Â  Â  return Response.redirect(`${process.env.NEXT_PUBLIC_SERVER_ADDRESS}/checkout?status=error&message=Order_Not_Found`, 302);
Â  Â  }

Â  Â  // 3. Create the final transaction record
Â  Â  const transactionCollection = db.collection("transactionHistory");
Â  Â  const newOrder = {
Â  Â  Â  orderId: crypto.randomUUID(),
Â  Â  Â  userEmail: pendingOrder.userEmail,
Â  Â  Â  tran_id,
Â  Â  Â  val_id,
Â  Â  Â  items: pendingOrder.items, // ðŸŽ¯ SECURE: Get items from the database record
Â  Â  Â  amount: verifyData.amount, // Use verified amount
Â  Â  Â  currency: verifyData.currency,
Â  Â  Â  card_type: verifyData.card_type,
Â  Â  Â  status: "success",
Â  Â  Â  tran_date: verifyData.tran_date,
Â  Â  Â  payment_gateway: "SSLCommerz",
Â  Â  Â  createdAt: new Date(),
Â  Â  };
Â  Â  await transactionCollection.insertOne(newOrder);
Â  Â  console.log("âœ… Order saved to transactionHistory:", newOrder.orderId);

Â  Â  // 4. Clear the user's cart (existing logic, assuming this collection exists)
Â  Â  try {
Â  Â  Â  await db.collection("carts").deleteMany({ userEmail: pendingOrder.userEmail });
Â  Â  Â  console.log(`ðŸ›’ Cart cleared for ${pendingOrder.userEmail}`);
Â  Â  } catch (cartError) {
Â  Â  Â  console.error("Failed to clear user cart:", cartError);
Â  Â  }

Â  Â  // 5. Remove the order from the pending collection
Â  Â  await db.collection("pendingOrders").deleteOne({ _id: tran_id });

Â  Â  // 6. Redirect to checkout with success message
Â  Â  return Response.redirect(`${process.env.NEXT_PUBLIC_SERVER_ADDRESS}/checkout?status=success&tran_id=${tran_id}&order_id=${newOrder.orderId}`, 302);

Â  } catch (error) {
Â  Â  console.error("--- SSLCommerz Success Route Error ---", error);
Â  Â  return Response.redirect(`${process.env.NEXT_PUBLIC_SERVER_ADDRESS}/checkout?status=server_error`, 302);
Â  }
}